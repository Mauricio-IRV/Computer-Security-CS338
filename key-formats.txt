Author: Mauricio I. Reyes Villanueva
Due: 10/02/2024

================== Private Key ==================
---------------- id_rsa_homework ----------------

-----BEGIN RSA PRIVATE KEY-----
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
-----END RSA PRIVATE KEY-----

--- Bullet 3: The file id_rsa_homework should contain a key which is represented with the ASN.1 type, as follows:

RSAPrivateKey ::= SEQUENCE {
             version           Version,
             modulus           INTEGER,  -- n
             publicExponent    INTEGER,  -- e
             privateExponent   INTEGER,  -- d
             prime1            INTEGER,  -- p
             prime2            INTEGER,  -- q
             exponent1         INTEGER,  -- d mod (p-1)
             exponent2         INTEGER,  -- d mod (q-1)
             coefficient       INTEGER,  -- (inverse of q) mod p
             otherPrimeInfos   OtherPrimeInfos OPTIONAL
}

Where each field represents the following:

   o  version is the version number, for compatibility with future
      revisions of this document.  It SHALL be 0 for this version of the
      document, unless multi-prime is used; in which case, it SHALL be
      1.

            Version ::= INTEGER { two-prime(0), multi(1) }
               (CONSTRAINED BY
               {-- version must be multi if otherPrimeInfos present --})

   o  modulus is the RSA modulus n.

   o  publicExponent is the RSA public exponent e.

   o  privateExponent is the RSA private exponent d.

   o  prime1 is the prime factor p of n.

   o  prime2 is the prime factor q of n.

   o  exponent1 is d mod (p - 1).

   o  exponent2 is d mod (q - 1).

   o  coefficient is the CRT coefficient q^(-1) mod p.

Source: https://datatracker.ietf.org/doc/html/rfc8017#appendix-A.1.2

--- Bullet 4: Steps taken to decode the private key:

- I simply used "pbcopy" to copy the contents of rsa_homework_key into my pc's pasteboard and then pasted it into the lapto ASN.1 Javascript decoder. 
From here the decoder provided me with the key converted into human readable numbers and categorized it following ASN.1 standards.

RSAPrivateKey SEQUENCE @0+1764 (constructed): (9 elem)
  version Version INTEGER @4+1: 0
  > Base64 Bytes: AgEA

  modulus INTEGER @7+385: (3072 bit)|
  > Base64 Bytes: AoIBgQC9CEstBgrWV3BrnEPOzL8ShGKidOPXMbGkAoBzZW4CiekewBlC4zznLsfFXYYMlVQP5_x546pbK203mzTjN-Zm1zJeoAtk6tUSEekWmGuJjhfRT4xQ5RGRTo4kDBcnFrra4drVWCCvgnrczzqxRRbSlnjgibC0iHONp-B2hk0scYiXyIWpwwx69GEM4vuhjXjkUMm1idwCnFcpCOKYa26gF4XeTKdN9ftLduz4-rEiXjnWOxMSnfwN2VcVYmRUmqfFVVGAqAlWsVOlCM2KFBQcx5iDnf2ujhfexAaYHSsElFdORFPqo-wCaS1M_oD31srAJ9wPjjr68BwOZMQHUcr5eJxIedENJep_qxrlwHQXKIKbsvK5YJS78vGBwHgRnpbCLQBautjoILMUUpnoWzYKQbV16I6m72scgdR0FLb0qS-FCpJJdra66nF-1zIc9ffBkxrGcrTIK9PQCqv3F9BsIljPHN-iax1Oqv3I04OADMPQ1OxTd7gwLbuEddcuvPE

  publicExponent INTEGER @396+3: 65537
  > Base64 Bytes: AgMBAAE

  privateExponent INTEGER @401+384: (3071 bit)|
  > Base64 Bytes: AoIBgF_3MOsHkULlmx4Wc9ot2abV7JkbDHw4Lz3bQ0jSKnpBd0b0MR7i7A1Vk3egFiiXOtjkZimfKeIk9spvEfd0bpSxFVIyn_Y4vbjxvMqK0LVBnNfXMZ3z3OpO3hxwwuRGRtBOLuF2XwmbDTLCRcKvF3oLiAw9-qZ8S2WT34FshwtUDAs6cpkPe2uEWyzGowaOItyOIwj1lusAYcNkTl0g1UWTC5QiiCEtCslx87Ym1vxip6wZy4H9EHQbbXlevR6ycDBec6eeEcBH2ldbYhiCfZzEvBPkGGfJk8hlpelwYoXOyPU54ZKM2W3dCpBCCqvPqLUvsRTDMf8wVQgZv1ycT_-fAPs4rW3zfr2W1bcy5RPbSGUAGrp0aSl5XzsrbyPlsaMiyra2ALHQ3hvdKaz9rBJbCT8YZ9uOpOkZS-b-ss5u-4REArCaWXA_ngFPrUlbLzatI6TOCe0ay_CPCDE4PZ_zAGu129l3_WPKMrT228DAR5UMc4qBrIFms2uyquoqkQ

  prime1 INTEGER @789+193: (1536 bit)|2146818277476117645239068431293617269373913082535924178461534060995692621119894341312651005263267570145577757992924619742401714684372361481994262193285310226691059851276413841906448325423239122282391653005674809551754946513552313942504296551764543749791835362290348176562378642425536252661779078886009383494789720353183990942088480448560853922789162990087398723468481030034964914942121087217231268440259752804394696951821528220193402977934663689442010013949138493
  > Base64 Bytes: AoHBAOQDoyKGOyVShS1Ik8vR5xl7iIqrSpvsqpTc6AUhege4ZEosTQJCVO7TB6iJ7m32t-WEbliGLslMK7vbReygwqqknLQYOB95EzylbVtvlCOFxhetBDTez47CsK571XFx5xhhNDEN1E5-PJ2jC2MM_DKj78XiFyS37DM9BcYGbZLNx2w0YSKeeAiMWS55PGFD9C87vJ5JWSz3sfc7czhWN6PyRXzN_iuOZqAqsip4aD6cOoaKPRVu3Wm4CxhKbx6WPQ

  prime2 INTEGER @985+193: (1536 bit)|1998240108890771870474318164077664945420811960877843851967451164128943119799589314993064753195091215127979240873084190176376268002268775482548161854616032891795833478955585001428052943576853828528450505800573282748296978964709436075367447322935908590310252036350747620106802048120175152097121913002364840233065314439432122804374228553433917781442972309954064673666771247731919798828333128544604475632474326614918882336765551789672662041814453634493178458669818053
  > Base64 Bytes: AoHBANQ70jkX6Fnga-DCIVpRu6JScy3Ye4E610dx6odU4o-qbhR4ACoEz7Wcf9N2opMm9UM7myt_0AlF6WD1Q6uaOrLwlgixNsIx2yt--kLC14sshJNI9alQ2DSj5vNdLY-KYmPMA5zFTF_yCefSbGz7Hk3HN54NyNiozLn-LD_GdA_f_iyViVEn5ZtEwWIe1J3ErRhxrh4Ntsal9nCsf7FzBd0mcmsuk0tj3dsAP85y-_0XEDljDFJYm1mNQDBqDKugxQ

  exponent1 INTEGER @1181+193: (1536 bit)|1268724822694470490223146610501443313855089912563878104826184837823278009499895139133318371070564967259843632525504119005187311159199016319927976089966482298395889941556476257852490197780909630363295712537387903760456243548169654871402931317368700794561660976499801260760142929944664000516400895743382050324804319071656761114760042971957984547409052470651312082619859602579981172782142786960199341714751979582022537004150321337508746063115300660020728593775486869
  > Base64 Bytes: AoHBAIbAa4m8wHmXIiOX79iVrTkPG6uv_YDWxh0BzJEzrpWfcI2xTrWWE_Gsf6soEOOl2hpnQHtKmZ3XSUVVGib0_vawH_gDFC_tcuP1dAKEl4zCw0Y8tu6z-wAIqTgE8SiBQyzSTXDsFltpGVOkBte71dPrtIlCy6CknY_OcXoNVHZc7I1TC1DVTGTo5M-lUHy_FzFO4XK-MFh17hQJa1eRBIL8a_qNFrgRCS-A7BhTXnAaDjByxBTFl06iONRbMP5nlQ

  exponent2 INTEGER @1377+192: (1533 bit)|253861897044792507950763279279042957956172549647816163563803628370807031378479036828543527093127995745236357469968093861612658610966169105508277699643454687536690869978549532659260704765565786904006575084235975893957926772055034022971899330313630085645103658309906231365629092766659723764600714827619354864893141401387183643883910263452565717812749858136282443092444533753695839679031716866233987886476055409857250321740543268700346127533258174173218240793519769
  > Base64 Bytes: AoHAGvZ2oLY-2JxAWE-ReS4FDnw3Ec388tAM5ZC9YPAR0HqwfX05WB1AXixBuRXLVbKPWjlKX15fia4OFjlSnYx8hJs4FGafNFCtLXt2Q-EJDS9csHGGdDpHHXjtMGHYFfJYyaDznIkcSNwxEfiTucy1buAuWrAZohzf1YlLCdcmi5XDbtqYlWziKLW1c8fC70A7VW2r1zmazOXsxyfDGUIprozh4GgMYnmPh_EiKhJFnUO-1euVdyi2o8vkKcJvVaaZ

  coefficient INTEGER @1572+193: (1536 bit)|1699035635519063152669548293123305156384176639250277467378466240255566357050869876401349572879239943916709799042163338219866644879263276484515012389775878139666112268108709712307972716574901800974866097826395629065464118199214900990177162102952347382862031513966259167970427953137437809384990241005854168547680555112865729048142170802009259093347281571785504380625094737640654386528006715003101251583064537495253493200342035198426186140512389890160917133381339661
  > Base64 Bytes: AoHBALR0gCV_f7cKdBpGnvOK1fKYsRAwzWCRGwzJR8w5Bkfw9xDfR5bLwF-reiEaO5pkdMMlLslFqD7vyoSZaVbCeoFuvwICRuxk03m6kEcZ4QHDhcCE9i5-RDEXJOhQsloojhXoGdgpNt19UDc8ZnbhGHSq-ssRescmL7awract68EigVXQFUrJNj-8yw0zMBG7wuqo7IgAoGtXRZpm1swz7Ee48-wJGxTmTJa-kgL9dc3XJHB7zF1U-yws8rTOWEAKDQ

================== Public Key ==================
------------- id_rsa_homework.pub --------------
ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQC9CEstBgrWV3BrnEPOzL8ShGKidOPXMbGkAoBzZW4CiekewBlC4zznLsfFXYYMlVQP5/x546pbK203mzTjN+Zm1zJeoAtk6tUSEekWmGuJjhfRT4xQ5RGRTo4kDBcnFrra4drVWCCvgnrczzqxRRbSlnjgibC0iHONp+B2hk0scYiXyIWpwwx69GEM4vuhjXjkUMm1idwCnFcpCOKYa26gF4XeTKdN9ftLduz4+rEiXjnWOxMSnfwN2VcVYmRUmqfFVVGAqAlWsVOlCM2KFBQcx5iDnf2ujhfexAaYHSsElFdORFPqo+wCaS1M/oD31srAJ9wPjjr68BwOZMQHUcr5eJxIedENJep/qxrlwHQXKIKbsvK5YJS78vGBwHgRnpbCLQBautjoILMUUpnoWzYKQbV16I6m72scgdR0FLb0qS+FCpJJdra66nF+1zIc9ffBkxrGcrTIK9PQCqv3F9BsIljPHN+iax1Oqv3I04OADMPQ1OxTd7gwLbuEddcuvPE= reece@MacbookPro.local

--- Bullet 7:

The RSA Public Key Syntax is as follows:

RSAPublicKey ::= SEQUENCE {
      modulus           INTEGER,  -- n
      publicExponent    INTEGER   -- e
}

Where each field of type RSAPublicKey represents the following

   o  modulus is the RSA modulus n.

   o  publicExponent is the RSA public exponent e.

Source: https://datatracker.ietf.org/doc/html/rfc8017#appendix-A.1.2

In order to decode this file we should first understand the structure. The public key consists of a key type identifier which as we can see is in ascii, a base64 encoded key, and a username, host to end things off.

We can then use this base64 and hexdump to manually decode our key, as such:

cat id_rsa_homework.pub | cut -d " " -f2 | base64 -d | hexdump -ve '/1 "%02x "' -e '2/8 "\n"'
source: https://www.thedigitalcatonline.com/blog/2018/04/25/rsa-keys/

-- In short this command takes in id_rsa_homework.pub, extracts the second field, decodes it from Base64, and formats the output as hex (1 byte = 2 hexadecimal digits), alongside some other formatting, and prints the following output:

00 00 00 07 73 73 68 2d 72 73 61 00 00 00 03 01
00 01 00 00 01 81 00 bd 08 4b 2d 06 0a d6 57 70
6b 9c 43 ce cc bf 12 84 62 a2 74 e3 d7 31 b1 a4
02 80 73 65 6e 02 89 e9 1e c0 19 42 e3 3c e7 2e
c7 c5 5d 86 0c 95 54 0f e7 fc 79 e3 aa 5b 2b 6d
37 9b 34 e3 37 e6 66 d7 32 5e a0 0b 64 ea d5 12
11 e9 16 98 6b 89 8e 17 d1 4f 8c 50 e5 11 91 4e
8e 24 0c 17 27 16 ba da e1 da d5 58 20 af 82 7a
dc cf 3a b1 45 16 d2 96 78 e0 89 b0 b4 88 73 8d
a7 e0 76 86 4d 2c 71 88 97 c8 85 a9 c3 0c 7a f4
61 0c e2 fb a1 8d 78 e4 50 c9 b5 89 dc 02 9c 57
29 08 e2 98 6b 6e a0 17 85 de 4c a7 4d f5 fb 4b
76 ec f8 fa b1 22 5e 39 d6 3b 13 12 9d fc 0d d9
57 15 62 64 54 9a a7 c5 55 51 80 a8 09 56 b1 53
a5 08 cd 8a 14 14 1c c7 98 83 9d fd ae 8e 17 de
c4 06 98 1d 2b 04 94 57 4e 44 53 ea a3 ec 02 69
2d 4c fe 80 f7 d6 ca c0 27 dc 0f 8e 3a fa f0 1c
0e 64 c4 07 51 ca f9 78 9c 48 79 d1 0d 25 ea 7f
ab 1a e5 c0 74 17 28 82 9b b2 f2 b9 60 94 bb f2
f1 81 c0 78 11 9e 96 c2 2d 00 5a ba d8 e8 20 b3
14 52 99 e8 5b 36 0a 41 b5 75 e8 8e a6 ef 6b 1c
81 d4 74 14 b6 f4 a9 2f 85 0a 92 49 76 b6 ba ea
71 7e d7 32 1c f5 f7 c1 93 1a c6 72 b4 c8 2b d3
d0 0a ab f7 17 d0 6c 22 58 cf 1c df a2 6b 1d 4e
aa fd c8 d3 83 80 0c c3 d0 d4 ec 53 77 b8 30 2d
bb 84 75 d7 2e bc f1

(4 bytes) 00 00 00 07 = 7
(7 bytes) 73 73 68 2d 72 73 61 = "ssh-rsa" (US-ASCII)
(4 bytes) 00 00 00 03 = 3 
(3 bytes) 01 00 01 = 65537 (publicExponent i.e The RSA public exponent, Commonly Used)
(4 bytes) 00 00 01 81 = 385
(257 bytes) 00 bd 08 ... 2e bc f1 = (modulus i.e The RSA modulus n)

Where the 00 (in the hex for the key modulus) is a prefix to prevent the modulus being interpreted as a negative via two's complement format. That leaves the other 256 bytes which are the modulus which checks out since the key should be of size 2048 bits.

Below is the full hexadecimal representation of the modulus:
bd084b2d060ad657706b9c43ceccbf128462a274e3d731b1a4028073656e0289e91ec01942e33ce72ec7c55d860c95540fe7fc79e3aa5b2b6d379b34e337e666d7325ea00b64ead51211e916986b898e17d14f8c50e511914e8e240c172716badae1dad55820af827adccf3ab14516d29678e089b0b488738da7e076864d2c718897c885a9c30c7af4610ce2fba18d78e450c9b589dc029c572908e2986b6ea01785de4ca74df5fb4b76ecf8fab1225e39d63b13129dfc0dd957156264549aa7c5555180a80956b153a508cd8a14141cc798839dfdae8e17dec406981d2b0494574e4453eaa3ec02692d4cfe80f7d6cac027dc0f8e3afaf01c0e64c40751caf9789c4879d10d25ea7fab1ae5c0741728829bb2f2b96094bbf2f181c078119e96c22d005abad8e820b3145299e85b360a41b575e88ea6ef6b1c81d47414b6f4a92f850a924976b6baea717ed7321cf5f7c1931ac672b4c82bd3d00aabf717d06c2258cf1cdfa26b1d4eaafdc8d383800cc3d0d4ec5377b8302dbb8475d72ebcf1

We can convert it into decimal format to get the following modulus:


As we can see this checks out with what we got for the modulus of the private key found above.

Referenced: https://www.thedigitalcatonline.com/blog/2018/04/25/rsa-keys/

================== Sanity Check ==================

In order to check if the numbers we got work as expected we can check to see if everything checks out via the RSA algorithm:

prime1 p = 2146818277476117645239068431293617269373913082535924178461534060995692621119894341312651005263267570145577757992924619742401714684372361481994262193285310226691059851276413841906448325423239122282391653005674809551754946513552313942504296551764543749791835362290348176562378642425536252661779078886009383494789720353183990942088480448560853922789162990087398723468481030034964914942121087217231268440259752804394696951821528220193402977934663689442010013949138493
prime2 q = 1998240108890771870474318164077664945420811960877843851967451164128943119799589314993064753195091215127979240873084190176376268002268775482548161854616032891795833478955585001428052943576853828528450505800573282748296978964709436075367447322935908590310252036350747620106802048120175152097121913002364840233065314439432122804374228553433917781442972309954064673666771247731919798828333128544604475632474326614918882336765551789672662041814453634493178458669818053

modulus N = 4289858388552576623439076887137997135352157648659382925349960136487171504126693177692005949248529918993678486131185345710414037958051544715792203940465863789854236503656534366817987368156996594855305107342260274987028324910108939741383944495809627583552604256311009947117852833591788587321116315474451337357023763683527472255915591184157697071126437298820115146518538779145973321256082309254345825387070695439218716020635604556624922772926543765587525859093350186549896074506958546033176047750707267016145289768050886003651438325670863652020260814326827816819294203882502997040579346794798716175504423190000477696719401114523998336718202684755984263668663577695824193890273742670335230579356364017803501871247896558202491301388220042988515917970150885996185777698212355654303456678574581686761143357237983095237661628507112593290793540615073635148566687748797360341066258396596618249198363250510522564971978356098580408614129

publicExponent e = 65537
privateExponent d = 2177821359621782761469727438118441532116234144506863745812571886126381786071977794451847505034527655138908966111824887271788233469678699730520506237747223006122347722861231898292586748339890957892959034230806134078359085678078559197637749932405848899589219772216055235219159888710688589480154125641248004107687834986567016027992853415446400342607194338603293575229539095792692347399348681068729724528941347757118053934763068178333884760944795117641371635227350258919257132949452015010905517037945754496831911995565022625764370957041664532008260503318719023228704283395026442216732542526320797696536913753505888211574596019102185918063350549190909433364779276835807270888856962896640231767689713331790436785320337501738029630599344157803380654598482420534723833738169669583738464104584195931144831091911676824607148211888421151477782905958203809424382404688240168637137176299358676399413151890594417263321485683478038303091345

1. (p*q = N)? True
2. lambda(N) = lcm(p-1, q-1) = 1072464597138144155859769221784499283838039412164845731337490034121792876031673294423001487312132479748419621532796336427603509489512886178948050985116465947463559125914133591704496842039249148713826276835565068746757081227527234935345986123952406895888151064077752486779463208397947146830279078868612834339255940920881868063978897796039424267781609324705028786629634694786493330314020577313586456346767673859804679005158901139156230693231635941396881464773337545601209422035017257579947363094856263055355061588570713893666553300258780683134151127152767339615127232581376032757942357004204007383591864661894107448844070656907667026179839837563678815893928191713416346910545360654602438079401586536514906792698889114028773165073105843451956343064686531773798472330997156949817166015615208806013035340616569715775590396760928864509628943432589966173587731478263321901746709770754332415529588346111375703963663605227526947414396
3. We can then use this lambda(N) to confirm if the following expression is really true
4. e*d%lambda(N)=1? True
5. As such, all the math checks out with all our values and we can most likely conclude that everything is accurate.